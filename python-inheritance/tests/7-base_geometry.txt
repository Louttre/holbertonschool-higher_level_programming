#!/usr/bin/python3

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Valid input
>>> bg.integer_validator("width", 10)

# Test area
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test integer_validator method with non-integer input
>>> bg.integer_validator("height", "ten")
Traceback (most recent call last):
    ...
TypeError: height must be an integer

# Test with only 1 arguments
>>> base_geometry.integer_validator("age")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Test with no argument
>>> base_geometry.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Test with invalid argument
>>> base_geometry.integer_validator("age", (52,))
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> base_geometry.integer_validator("age", [3])
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> base_geometry.integer_validator("age", {5, 9})
Traceback (most recent call last):
...
TypeError: age must be an integer

# Test integer_validator method with integer less than 1
>>> bg.integer_validator("side", 0)
Traceback (most recent call last):
    ...
ValueError: side must be greater than 0

# Test integer_validator method with valid input as float
>>> bg.integer_validator("length", 8.5)
Traceback (most recent call last):
    ...
TypeError: length must be an integer

# Test integer_validator method with None input
>>> bg.integer_validator("width", None)
Traceback (most recent call last):
    ...
TypeError: width must be an integer
